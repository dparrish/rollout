#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl
=head1 NAME

241-file_extract

=head1 DESCRIPTION

Downloads a tarball and extracts it locally.

=head1 EXAMPLE

  class Sample => {
    file_extract => {
      "rollout:/files/bigtarball.tar.gz" => {
        dest => "/tmp/bigtarball",
        check => "/tmp/bigtarball/inner_file",
        cmd => "ls -l",
      },
    },
  };

=head1 OPTIONS

=over

=item file_extract/I<tarball>

Download and extract the given tarball locally.

=item file_extract/I<tarball>/dest

Desination directory to extract the tarball to.

=item file_extract/I<tarball>/check

Check the existence of this file before downloading. If this file exists, this
tarball will be skipped.

=item file_extract/I<tarball>/cmd

Shell command to run after extraction. This command will be run from inside the
destination directory of the extraction.

=back

=head1 COPYRIGHT

RolloutNG is based heavily on Rollout (https://github.com/dparrish/rollout) by David Parrish, Copyright 2010.   RolloutNG is Copyright by Chris Donovan 2014.

=cut

validate_config {
  file_extract => {
    type => "hash",
    key => {
      type => "string",
      help => "Source tarball",
    },
    value => {
      type => "options",
      options => {
        dest => { type => "path", help => "Destination path to extract to (default /)" },
        check => { type => "path", help => "Skip extract if this path exists" },
        cmd => { type => "string", help => "Shell command to run after extraction" },
      },
    },
  },
};

my %file_extract = flatten_hash(c("$hostname/file_extract"));
while (my($source, $f) = each(%file_extract)) {
  next unless i_should($source);
  $f->{dest} ||= "/";
  v "Skipping $source, $f->{check} exists" and next if $f->{check} && -e $f->{check};

  $source =~ s/^rollout:/$config->{base_url}/;

  l "Extracting $source to $f->{dest}";
  my $fn = $source;
  $fn =~ s/.*\///;
  validate("Unknown filename $source", $fn);
  w "/tmp/$fn already exists, refusing to overwrite" and next if -f "/tmp/$fn";

  if (!$safe_mode) {
    if (-x "/usr/bin/wget") {
      system("/usr/bin/wget", $source, "-O", "/tmp/$fn");
      next if $?;
    } elsif (-x "/usr/bin/fetch") {
      system("/usr/bin/fetch", "-o/tmp/$fn", $source);
      next if $?;
    } else {
      try {
        http_file(-url => $source, -dest => "/tmp/$fn") or next;
      } catch HttpException with {
        my($ex) = @_;
        $ex->throw("Couldn't install $f->{dest} from $source: $ex");
      };
    }
  }

  dir_check($f->{dest}) unless $f->{dest} eq '/';
  chdir($f->{dest});

  if ($fn =~ /\.tar$/) {
    command("tar", "xf", "/tmp/$fn") and next;
  } elsif ($fn =~ /\.tar\.gz$/) {
    command("tar", "zxf", "/tmp/$fn") and next;
  } elsif ($fn =~ /\.tar\.bz2$/) {
    command("tar", "jxf", "/tmp/$fn") and next;
  }

  unlink("/tmp/$fn") unless $safe_mode;
  if ($f->{cmd}) {
    chdir($f->{dest});
    command($f->{cmd});
  }
}

