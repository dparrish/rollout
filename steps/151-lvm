#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl
=head1 NAME

151-lvm

=head1 DESCRIPTION

=over

=item * Build and resize LVM logical volumes

=item * Create filesystems on the logical volumes

=item * Mount logical volumes on startup

=back

B<NOTE:> This step currently doesn't create Volume Groups or Physical Volumes.

=head1 EXAMPLE

  class Sample => {
    lvm => {
      vol01 => {
        # Ext4 filesystem mounted at /mnt/vol01
        size => '10G',
        vg => 'vg01',
        filesystem => 'ext4',
        mountpoint => '/mnt/vol01',
        mkfsoptions => '-j',
        mount_options => 'noatime',
        mount_order => 3,
      },
      vol02 => {
        # Raw block device
        size => '100G',
      },
    },
  };

=head1 OPTIONS

=over


=item lvm/C<lv>

Manage the given Logical Volume. If it doesn't exist, it will be created. If it does exist,
it will be resized to match the options.

=item lvm/C<lv>/size

Set the size of the LV. This can be any size expression that lvcreate understands,
such as 100M, 1G, 1T, 1P.

=item lvm/C<lv>/vg

Choose which Volume Group the LV will be created on. This is only used at creation
time.

=item lvm/C<lv>/filesystem

Choose the filesystem which will be created on the LV. If this is not set,
no filesystem will be created and it will be left as an empty block device. This is only used at
creation time.

=item lvm/C<lv>/mkfsoptions

Add flags to mkfs when the filesystem is created. This is only used at
creation time.

Example: -j -L lv01 -O large_file

=item lvm/C<lv>/mountpoint

Choose the local path that the LV will be mounted on. If this is not set,
the LV will not be mounted.

=item lvm/C<lv>/mount_options

The set of options to mount for the filsystem.

Example: noatime,noexec

=item lvm/C<lv>/mount_order

The order field (the last field in /etc/fstab) which is used to set the
order that filesystem are mounted and checked at boot time.

=back

=head1 COPYRIGHT

RolloutNG is based heavily on Rollout (https://github.com/dparrish/rollout) by David Parrish, Copyright 2010.   RolloutNG is Copyright by Chris Donovan 2014.

=cut

use strict;

validate_config {
  lvm => {
    type => "hash",
    key => {
      help => "Volume name",
      type => "string",
      regex => qr/^[a-z0-9_-]+$/,
    },
    value => {
      type => "options",
      options => {
        size => { type => "string", help => "Volume size" },
        vg => { type => "string", help => "Volume Group name" },
        filesystem => { type => "string", help => "Filesystem type (man filesystems(5))" },
        mountpoint => { type => "path" },
        mkfsoptions => { type => "string", help => "Extra options to mkfs" },
        mount_options => { type => "string" },
        mount_order => { type => "int", help => "Order for fsck in /etc/fstab (default 2)" },
      },
    },
  },
};

return unless my %lvm = flatten_hash(c("$hostname/lvm"));
if (i_distro("debian", "ubuntu")) {
  package_check("lvm-common", "lvm2");
} else {
  w "Don't know how to manage LVM configuration on ". i_os(). " ". i_distro();
}

while (my($part, $l) = each(%lvm)) {
  w "No size specified for volume $part" and next unless $l->{size};
  w "No volume group specified for volume $part" and next unless $l->{vg};

  system("lvdisplay /dev/$l->{vg}/$part > /dev/null 2>/dev/null");
  if ($? == 0) {
    # Volume already exists
    v "Logical Volume $part exists";
  } else {
    # Volume doesn't e4xist
    l "Creating Logical Volume \"$part\"";
    command("lvcreate", "-n", "$part", "-L", $l->{size}, $l->{vg});
  }

  if ($l->{filesystem} && $l->{mountpoint}) {
    my $fstab = slurp_file("/etc/fstab");
    if ($fstab !~ /\s+$l->{mountpoint}\s+/) {
      $l->{mkfsoptions} ||= "";
      command("mkfs -t $l->{filesystem} $l->{mkfsoptions} /dev/$l->{vg}/$part");
    }
    w "Invalid mountpoint" and next unless $l->{mountpoint} =~ /^[a-z0-9\/_-]+$/;
    $l->{mount_order} ||= 2;
    $l->{mount_options} ||= "defaults";
    dir_check($l->{mountpoint});
    file_append("/etc/fstab",
      "/dev/$l->{vg}/$part $l->{mountpoint} $l->{filesystem} $l->{mount_options} 0 $l->{mount_order}\n",
      qr/\/dev\/$l->{vg}\/$part/,
      "mount $l->{mountpoint}");
  }
}

