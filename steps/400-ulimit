#!/usr/bin/perl
# vim:tw=100 sw=2 expandtab ft=perl
=head1 NAME

400-ulimit

=head1 DESCRIPTION

Update user/group limits in C</etc/security/limits.conf>.

=head1 EXAMPLE

  class Sample => {
    ulimit => {
      user1 => {
       nofile => 2048,
       maxlogins => 3,
       -c => 5000,    # ulimit style parameters supported
       stack => { soft => 8192, hard => 16384 }, # different soft and hard limits
     },
      '@group1' => {
       maxlogins => 15,
     },
    },
  };

=head1 COPYRIGHT

RolloutNG is based heavily on Rollout (https://github.com/dparrish/rollout) by David Parrish, Copyright 2010.   RolloutNG is Copyright by Chris Donovan 2014.

=cut

use strict;

validate_config {
  ulimit => {
    type => "hash",
    key => {
      help => "User name or group name (prepended with @)",
      type => "string",
      regex => qr/^\@?[\w_.\-]+$/,
    },
    value => {
      type => "options",
      options => {
        "-c" => { type => [ "int", "hash" ] },
        "-d" => { type => [ "int", "hash" ] },
        "-e" => { type => [ "int", "hash" ] },
        "-f" => { type => [ "int", "hash" ] },
        "-i" => { type => [ "int", "hash" ] },
        "-l" => { type => [ "int", "hash" ] },
        "-m" => { type => [ "int", "hash" ] },
        "-n" => { type => [ "int", "hash" ] },
        "-q" => { type => [ "int", "hash" ] },
        "-r" => { type => [ "int", "hash" ] },
        "-s" => { type => [ "int", "hash" ] },
        "-t" => { type => [ "int", "hash" ] },
        "-u" => { type => [ "int", "hash" ] },
        "-v" => { type => [ "int", "hash" ] },
        "-x" => { type => [ "int", "hash" ] },
        as => { type => [ "int", "hash" ] },
        core => { type => [ "int", "hash" ] },
        cpu => { type => [ "int", "hash" ] },
        data => { type => [ "int", "hash" ] },
        fsize => { type => [ "int", "hash" ] },
        locks => { type => [ "int", "hash" ] },
        memlock => { type => [ "int", "hash" ] },
        msgqueue => { type => [ "int", "hash" ] },
        nofile => { type => [ "int", "hash" ] },
        nproc => { type => [ "int", "hash" ] },
        priority => { type => [ "int", "hash" ] },
        rss => { type => [ "int", "hash" ] },
        rtprio => { type => [ "int", "hash" ] },
        sigpending => { type => [ "int", "hash" ] },
        stack => { type => [ "int", "hash" ] },
        maxlogins => { type => [ "int", "hash" ] },
      },
    },
  },
};

return unless -f "/etc/security/limits.conf";

my %all_limits = (
  "-c" => "core",
  "-d" => "data",
  "-e" => "priority",
  "-f" => "fsize",
  "-i" => "sigpending",
  "-l" => "memlock",
  "-m" => "rss",
  "-n" => "nofile",
  "-q" => "msgqueue",
  "-r" => "rtprio",
  "-s" => "stack",
  "-t" => "cpu",
  "-u" => "nproc",
  "-v" => "as",
  "-x" => "locks",
);

my %ulimits = flatten_hash(c("$hostname/ulimit"));
while (my($name, $l) = each(%ulimits)) {
  next unless i_should($name);
  if ($name =~ /^[@%](.*)/) {
    w "Setting ulimits for non-existent group $1" unless getgrnam($1);
  } elsif ($name !~ /^[\*\%]$/) {
    w "Setting ulimits for non-existent user $name" unless getpwnam($name);
  }
  while (my($limit, $value) = each(%$l)) {
    $limit = $all_limits{$limit} if $all_limits{$limit};
    if (ref $value eq 'HASH') {
      # Hard and/or soft limits specified
      foreach (keys %$value) {
        file_append(-file => "/etc/security/limits.conf", -add => "$name $_ $limit $value->{$_}",
                    -match => qr/^\Q$name\E\s+(?:$_|-)\s+\Q$limit\E\s/, -create => 1);
      }
    } else {
      # Single limit specified, assume it's both
      file_append(-file => "/etc/security/limits.conf", -add => "$name - $limit $value",
                  -match => qr/^\Q$name\E.*\b\Q$limit\E\s/, -create => 1);
    }
  }
}

