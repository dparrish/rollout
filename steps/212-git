#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl
=head1 NAME

212-git

=head1 DESCRIPTION

Check out git modules to the local filesystem.

=head1 EXAMPLE

  class Sample => {
    git => {
      '/tmp/checkout_path' => {
        source => 'http://git.domain/module/trunk.git',
        branch => 'master',
        clone_options => [],
        pull_options => [],
        cmd => 'ls -l',
      },
    },
  };
  class Sample_SSH => {
    git => {
      '/tmp/checkout_path' => {
        source => 'ssh:git@git.domain/module/trunk.git',
        identity_file => '/home/user/.ssh/id_dsa',
        branch => 'master',
        clone_options => [],
        pull_options => [],
        cmd => 'ls -l',
      },
    },
  };

=head1 OPTIONS

=over

=item git/I<path>

Check out the given module to path.

=item git/I<path>/source

The git URL that will be cloned

=item git/I<path>/identity_file

The SSH identity (key) used for authentication to the git server. This assumes that there is no
passphrase on the SSH key itself.

=item git/I<path>/branch

The branch to check out. If this changes, the current checked out version will be updated to match
the revision specified here.

=item git/I<path>/cmd

A shell command to be run after the checkout or any updates are applied. This command is run from
inside the checked-out directory.

=item git/I<path>/clone_options

Any options to add to the git clone command line

=item git/I<path>/pull_options

Any options to add to the git pull command line

=back

=head1 COPYRIGHT

Copyright 2010 David Parrish

=cut

validate_config {
  git => {
    type => "hash",
    key => {
      help => "Destination local path to check out to",
      type => "path",
    },
    value => {
      type => "options",
      options => {
        source => { type => "string", required => 1 },
        identity_file => { type => "string" },
        branch => { type => "string" },
        cmd => { type => "string", help => "Post checkout command to run (in checked out dir)" },
        clone_options => { type => "list", items => { type => "string" } },
        pull_options => { type => "list", items => { type => "string" } },
      },
    },
  },
};

return unless i_has('git');
my %git = flatten_hash(c("$hostname/git"));
package_check("git-core") if keys %git && (c("$hostname/_os_detection/distro") eq 'ubuntu' ||
                                           c("$hostname/_os_detection/distro") eq 'debian');
foreach my $dir (sort(keys %git)) {
  my $x = $git{$dir};
  #my $method = split(':', $x->{source}, 2);
  #print $method . "\n";
  if (!-d $dir) {
    # New checkout
    my $basedir = dirname($dir);
    dir_check($basedir);
    chdir $basedir or throw LocalFileException "Could not cd to new dir $basedir: $!";
    v "Checking out $x->{source} to $dir";
    my @cmd = ("git", "clone", "-q");
    push @cmd, "--branch", $x->{branch} if $x->{branch};
    push @cmd, @{$x->{clone_options} || []};
    push @cmd, $x->{source}, $dir;
    command(@cmd);
    if ($x->{cmd}) {
      chdir $dir or throw LocalFileException "Could not cd to new checked out dir $dir: $!";
      command($x->{cmd});
    }
  } else {
    # Update existing checked out directory
    chdir $dir;
    my @cmd = ("git", "pull", "-q");
    push @cmd, @{$x->{pull_options} || []};
    v "Updating $dir from $x->{source}";
    command(@cmd);
  }
}
