#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl
use POSIX qw( ttyname );
use Socket qw( getaddrinfo getnameinfo );

=head1 NAME

999-complete

=head1 DESCRIPTION

Log the run in a log file, e.g. /var/log/rollout.log. The contents of the log file should be the
same as the output given when rollout is run, with the addition of a header at the start of each
run's output. The header looks like:

 -------------------------------------------------
 START: Tue Aug 31 17:23:49 2010
 DURATION: 32
 COMMENT: No comment specified
 FROM: 172.16.140.1 42642
 HOSTNAME: rhel6

B<This is a required step and will always be run, no matter what C<skip_steps> configurations or
C<-o> command line options are specified.>


=head1 EXAMPLE

  class Sample => {
    rollout => {
      logfile => "/var/log/rollout.log",
    },
  };

=head1 OPTIONS

=over

=item rollout/logfile

Path to log every Rollout run to. If this is not specified, no logging will be done.

=back

=head1 COPYRIGHT

Copyright 2010 David Parrish

=cut


if (!$safe_mode) {
  my $end_time = time;
  my $duration = abs($end_time - $start_time);

  # Record a log file of each rollout run
  my $fn = c("$hostname/rollout/logfile");
  if ($fn && (my $fh = new IO::File ">>$fn"))
  {
    my($src, $srcport, $sshport) = split(/\s/, $ENV{SSH_CLIENT}) if $ENV{SSH_CLIENT};
    $src ||= POSIX::ttyname(1);
    # $src will be blank if coming from cron.
    $src ||= "cron";
    if ($src =~ /(?:::ffff:)?(\d+\.\d+\.\d+\.\d+)\s+(\d+)\s+\d+/) {
      my ($error, @src_info) = getaddrinfo($src, 0); 
      ($error, $src) = getnameinfo($src_info[0]->{addr});
    }

    print $fh "-------------------------------------------------\n";
    print $fh "START: ". localtime($start_time). "\n";
    print $fh "DURATION: $duration\n";
    print $fh "COMMENT: $rollout_comment\n";
    print $fh "FROM: $src\n";
    print $fh "HOSTNAME: $hostname\n";
    print $fh "\n$log\n";
    print $fh "\n";
  }

  # Uncomment this section to notify a central server of each rollout
#  eval
#  {
#    require URI::Escape;
#    import URI::Escape;
#    print http_post("$config->{base_url}/complete.php",
#      hostname  => $hostname,
#      on_host    => hostname,
#      start_time  => $start_time,
#      end_time  => $end_time,
#      duration  => $duration,
#      from    => $host,
#      from_port  => $port,
#      comment    => $rollout_comment,
#      'log'    => $log,
#    );
#
#    sub http_post
#    {
#      my($url, %v) = @_;
#
#      my($h, $p, $path) = $url =~ /^(?:http:\/\/)?([^\/:]+)(?::(\d+))?(\/?.*)/;
#      my $s = Net::HTTP->new(Host => $h, PeerPort => $p || 80) || return w $@;
#
#      $s->write_request(POST => $path, 'User-Agent' => "Rollout/1.0", 'Content-Type' => 'application/x-www-form-urlencoded', join("&", map { "$_=". uri_escape($v{$_}) } keys %v));
#      my($code, $mess, %h) = $s->read_response_headers;
#
#      if ($code != 200)
#      {
#        w "POST $url returned $code";
#        return undef;
#      }
#
#      my $res = "";
#      while (1)
#      {
#        my $buf;
#        my $n = $s->read_entity_body($buf, 1024);
#        fatal "Read failed: $!" unless defined $n;
#        last unless $n;
#        $res .= $buf;
#      }
#
#      return $res;
#    }
#  };
}

