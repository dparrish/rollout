#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl
=head1 NAME

150-packages

=head1 DESCRIPTION

=over

=item * Install new packages

=item * Remove packages that are not required

=item * Updgrade specific packages

=item * Upgrade all installed packages

=back

=head1 EXAMPLE

  class Sample => {
    packages => [ "zsh", "cvs", "rcs" ],
    packages_remove => [ "svn", "git" ],

    apt => {
      repos => [
        'deb http://archive.debian.org/debian/ etch main',
        'deb-src http://archive.debian.org/debian/ etch main',
      ],
      always_check => 1,
      auto_upgrade => 1,
    },

    yum => {
      repos => {
        epel => {
          name => 'Extra Packages for Enterprise Linux 5 - $basearch',
          mirrorlist => 'http://mirrors.fedoraproject.org/mirrorlist?repo=epel-5&arch=$basearch',
          failovermethod => 'priority',
          enabled => 1,
          gpgcheck => 0,
        },
      },
      always_check => 1,
      auto_upgrade => 1,
    },

    pkgutil => {
      auto_upgrade => 1,
    },

    emerge => {
      auto_upgrade => 1,
    },

    up2date => {
      auto_upgrade => 1,
      command => "/usr/bin/up2date-nox",
    },
  };

  device machine1 =>> {
    ISA => { Sample => 1 },
    # This specific machine uses csh instead of zsh
    packages => [ "csh" ],
    skip_steps => [ "install-zsh" ],
  };

=head1 OPTIONS

=over

=item packages

Install the given list of packages. If the packages are already installed, they will be upgraded.

=item packages_remove

Uninstall the given list of packages

=item apt/repos

Add the set of apt repositories to C</etc/apt/sources.list.d/rollout.list>.

=item apt/auto_upgrade

Automatically upgrade all installed packages using apt

=item apt/always_check

Always download the latest lists of available packages using C<apt-get update>. This is normally
done daily by a cron job, but you can set this to C<1> if you want to make sure you always have the
latest package lists when Rollout is run.

=item yum/repos

Add the set of YUM repositories to C</etc/yum.repos.d/rollout.repo>.

=item yum/auto_upgrade

Automatically upgrade all installed packages using YUM

=item yum/always_check

Always download the latest lists of available packages using C<yum makecache>.  This is normally
done daily by a cron job, but you can set this to C<1> if you want to make sure you always have the
latest package lists when Rollout is run.

=item pkgutil/auto_upgrade

Automatically upgrade all installed packages using pkgutil

=item emerge/auto_upgrade

Automatically upgrade all installed packages using emerge

=item up2date/auto_upgrade

Automatically upgrade all installed packages using up2date

=item up2date/command

Set the command that is used for up2date operations. By default this is C</usr/bin/up2date-nox>.

=back

=head1 SKIPPABLE STEPS

=over


=item install

Install any packages

=item install-I<package>

Install a specific package. This can be used to prevent a specific package being installed on a
limited set of machines.

=item remove

Remove any packages

=item remove-I<package>

Remove a specific package

=back

=head1 COPYRIGHT

Copyright 2010 David Parrish

=cut

validate_config {
  packages => {
    help => "Packages to install",
    type => "list",
    items => {
      help => "Package name",
      type => "string",
    },
  },
  packages_remove => {
    help => "Packages to remove",
    type => "list",
    items => {
      help => "Package name",
      type => "string",
    },
  },
  apt_base => {
    help => "List of apt sources to add to /etc/apt/sources.list.d/rollout.list",
    type => "list",
    deprecated => "apt/repos",
    items => { type => "string" },
  },
  deb_options => {
    help => "List of options to run through debconf-set-selections",
    type => "list",
    items => { type => "string" },
    deprecated => "apt/deb_options",
  },
  apt => {
    type => "options",
    options => {
      repos => {
        type => "list",
        items => { type => "string" },
      },
      deb_options => {
        help => "List of options to run through debconf-set-selections",
        type => "list",
        items => { type => "string" },
      },
      auto_upgrade => {
        type => "boolean",
        help => "Whether all installed packages will be upgraded when Rollout is run",
      },
      always_check => {
        type => "boolean",
        help => "Always update the local cache before attemping any other ops (slower)",
      },
    }
  },
  yum => {
    help => "Configuration for the Yellowdog Updater Modified",
    type => "options",
    options => {
      auto_upgrade => {
        type => "boolean",
        help => "Whether all installed packages will be upgraded when Rollout is run",
      },
      always_check => {
        type => "boolean",
        help => "Always update the local cache before attemping any other ops (slower)",
      },
      repos => {
        type => "hash",
        key => {
          type => "string",
        },
        value => {
          type => "options",
          options => {
            name => { type => "string" },
            baseurl => { type => "string" },
            mirrorlist => { type => "string" },
            failovermethod => { type => "string" },
            enabled => { type => "boolean" },
            gpgcheck => { type => "boolean" },
            gpgkey => { type => "string" },
          },
        },
      },
    },
  },
  pkgutil => {
    help => "Configuration for the Solaris package manager",
    type => "options",
    options => {
      auto_upgrade => {
        type => "boolean",
        help => "Whether all installed packages will be upgraded when Rollout is run",
      },
    },
  },
  emerge => {
    help => "Configuration for the Gentoo portage manager",
    type => "options",
    options => {
      auto_upgrade => {
        type => "boolean",
        help => "Whether all installed packages will be upgraded when Rollout is run",
      },
    },
  },
  up2date => {
    help => "Configuration for the RedHat Enterprise Linux package manager",
    type => "options",
    options => {
      command => {
        type => "string",
      },
      auto_upgrade => {
        type => "boolean",
        help => "Whether all installed packages will be upgraded when Rollout is run",
      },
    },
  },
};

# Get lists of packages to add and remove
my @install = i_should("install")
    ? grep { i_should("add-$_") } uniq(flatten_list(c("$hostname/packages")))
    : ();
my @remove = i_should("remove")
    ? grep { i_should("remove-$_") } uniq(flatten_list(c("$hostname/packages_remove")))
    : ();

return unless @install || @remove;
my $p = $m{$hostname}{_packages};
$p->{_done_packages} = 1;

# Check for packages that are to be installed and removed
foreach my $package (@remove) {
  throw ConfigException "Attempt to both remove and install package '$package'. Naughty."
    if grep /^\Q$package\E$/, @install;
}

# {{{ Apt
if (-x "/usr/bin/apt-get" && -x "/usr/bin/dpkg") {
  # APT for package installation (Debian / Ubuntu)
  my @apt = uniq(flatten_list(c("$hostname/apt/repos")));
  text_install(-file => "/etc/apt/sources.list.d/rollout.list",
               -text => join("", map { "$_\n" } @apt),
               -mode => 0644, -uid => 0, -gid => 0)
      if @apt && i_should("apt_sources");

  if (i_should("deb_options") && -f "/usr/bin/debconf-set-selections") {
    my $text = join("", map { "$_\n" } uniq(flatten_list(c("$hostname/apt/deb_options"))));
    if ($text && open(DEBCONF, "|debconf-set-selections")) {
      print DEBCONF $text;
      close(DEBCONF);
    }
  }

  $ENV{DEBIAN_FRONTEND} = 'noninteractive';

  $p->{update} = sub {
    my $p = $m{$hostname}{_packages};
    if (!%{$p->{installed_packages}}) {
      $p->{installed_packages} = {};
      v "Updating installed packages list";
      open(FH, "dpkg -l|") or throw LocalFileException "Can't run dpkg: $!";
      while (<FH>) {
        my($status, $package, $version, $description) = split /\s+/;
        next unless $package;
        next unless $status =~ /^.i/i;
        $p->{installed_packages}{$package} = $version;
      }
      close(FH);

      if (c("$hostname/apt/always_check")) {
        v "Updating packages list";
        command("apt-get", "-q", "update");
      }
    }
  };

  $p->{install} = sub {
    my @do_install = grep { !$p->{installed_packages}{$_} } map { s/\.(?:32|64)bit$//; $_ }
                     grep { !$p->{installed_packages}{$_} } @_;
    if (@do_install) {
      l "Installing packages: ". join(" ", uniq(@do_install));
      command("apt-get", "-qy", "-oStopOnError=false", "-oDPkg::Options={\"--force-confold\"}",
              "--force-yes", "--allow-unauthenticated","install", uniq(@do_install));
    }
  };

  $p->{remove} = sub {
    my @do_remove = grep { $p->{installed_packages}{$_} } map { s/\.(?:32|64)bit$//; $_ } @_;
    if (@do_remove) {
      l "Removing packages: ". join(" ", @do_remove);
      command("apt-get", "-qq", "-y", "remove", uniq(@do_remove));
    }
  };

  package_check(@install);
  package_uncheck(@remove);

  if (c("$hostname/apt/auto_upgrade")) {
    l "Upgrading all installed packages";
    command("apt-get", "upgrade", "-q", "-y");
  }
}
# }}}
# {{{ Yum
elsif (-x "/usr/bin/yum") {
  if (c("$hostname/yum/repos")) {
    my %config;
    my %c = flatten_hash(c("$hostname/yum/repos"));
    while (my($item, $value) = each(%c)) {
      $config{$item} = [];
      foreach (keys %$value) {
        push @{$config{$item}}, $_, $value->{$_};
      }
    }
    config_file(-file => "/etc/yum.repos.d/rollout.repo", -sections => \%config, -type => "ini");
  }

  $p->{update} = sub {
    my $p = $m{$hostname}{_packages};
    if (!%{$p->{installed_packages}}) {
      if (c("$hostname/yum/always_check")) {
        l "Updating YUM metadata cache";
        command("yum", "makecache");
      }

      v "Building list of installed packages";
      open(FH, "/bin/rpm -q -a --queryformat '%{NAME}\n'|")
          or throw LocalFileException "Could not run rpm: $!";
      while (<FH>) {
        chomp;
        $p->{installed_packages}{$_}++;
      }
      close(FH);

      # Check that all required packages are either installed or up-to-date
      v "Checking for packages that require updates";
      $p->{can_update} ||= [];
      open(FH, "/usr/bin/yum check-update|") or throw LocalFileException "Could not run yum: $!";
      while (<FH>) { last if /^\s+$/ }   # Read the header
      while (<FH>) {
        chomp;
        s/^(\s+|\s+$)//g;
        my($package, $version, $extra) = split /\s+/, $_, 3;
        $package =~ s/\.[a-z0-9+]+$//;
        next unless $package;
        push @{$p->{can_update}}, grep { /^\Q$package\E(?:\.[a-z0-9]+)?$/ } @_;
      }
      close(FH);
    }
  };

  $p->{install} = sub {
    my @do_install = grep { !$p->{installed_packages}{$_} } map { s/\.(?:32|64)bit$//; $_ }
                     grep { !$p->{installed_packages}{$_} } @_;
    return unless @do_install;
    l "Installing packages: ". join(" ", uniq(@do_install));
    command("yum", "install", "-y", uniq(@do_install));
  };

  $p->{remove} = sub {
    my @do_remove = grep { $p->{installed_packages}{$_} } map { s/\.(?:32|64)bit$//; $_ } @_;
    return unless @do_remove;
    l "Removing packages: ". join(" ", @do_remove);
    command("yum", "remove", "-y", uniq(@do_remove));
  };

  package_check(@install);
  package_uncheck(@remove);

  if (c("$hostname/yum/auto_upgrade")) {
    l "Upgrading all installed packages";
    command("yum", "upgrade", "-y");
  }
}
# }}}
# {{{ Pkgutil (Solaris)
elsif (-f "/opt/csw/bin/pkgutil") {
  $p->{update} = sub {
    my $p = $m{$hostname}{_packages};
    if (!%{$p->{installed_packages}}) {
      $p->{available} = {};
      $p->{can_upgrade} = {};
      v "Building list of available packages";
      open(FH, "/opt/csw/bin/pkgutil -a|") or throw LocalFileException "Could not run pkgutil: $!";
      while (<FH>) {
        chomp;
        my($package, $shortname, $version, $extra) = split /\s+/, $_, 4;
        $p->{available}{$package} = $shortname;
      }

      v "Building list of installed packages";
      open(FH, "/opt/csw/bin/pkgutil -c|") or throw LocalFileException "Could not run pkgutil: $!";
      <FH>;
      while (<FH>) {
        s/\s+$//;
        my($package, $installed, $catalog) = split /\s+/, $_, 3;
        $p->{installed_packages}{$package} = $package;
        $p->{can_upgrade}{$package}++ unless $catalog eq 'SAME';
      }
    }
  };

  $p->{install} = sub {
    my @do_install = uniq(grep {
      (!$p->{installed_packages}{$_} && !$p->{installed_packages}{$p->{available}{$_}}) ||
      ($p->{can_upgrade}{$_} || $p->{can_upgrade}{$p->{available}{$_}})
    } @_);
    return unless @do_install;
    l "Installing packages: ". join(" ", @do_install);
    command("/opt/csw/bin/pkgutil", "-y", "-i", @do_install);
    delete $p->{can_upgrade}{@do_install};
  };

  $p->{remove} = sub {
    my @do_remove = uniq(grep { defined } map {
      $p->{installed_packages}{$_} || $p->{installed_packages}{$p->{available}{$_}}
    } @_);
    return unless @do_remove;
    l "Removing packages: ". join(" ", @do_remove);
    command("/opt/csw/bin/pkgutil", "-y", "-r", @do_remove);
  };


  package_check(@install);
  package_uncheck(@remove);

  if (c("$hostname/pkgutil/auto_upgrade") && %{$p->{can_upgrade}}) {
    l "Upgrading all installed packages";
    command("/opt/csw/bin/pkgutil", "-y", "-u");
    $p->{can_upgrade} = {};
  }
}
elsif (i_os("solaris")) {
  w "Solaris package management is supported using pkgutil (http://pkgutil.wikidot.com/) only";
}
# }}}
# {{{ FreeBSD Packages
elsif (i_os("freebsd") && -f "/usr/sbin/pkg_add") {
  $p->{update} = sub {
    my $p = $m{$hostname}{_packages};
    if (!%{$p->{installed_packages}}) {
      open(FH, "/usr/sbin/pkg_info|") or throw LocalFileException "Can't run pkg_info: $!";
      v "Building list of installed packages";
      while (<FH>) {
        chomp;
        my($package, $extra) = split /\s+/, $_, 2;
        $p->{installed_packages}{$package} = $package;
      }
      close(FH);
    }
  };

  $p->{install} = sub {
    my @do_install;
    foreach my $package (@_) {
      push @do_install, $package unless grep /^\Q$package\E(?:-.*)?$/, keys
                        %{$p->{installed_packages}};
    }
    return unless @do_install;
    l "Installing packages: ". join(" ", uniq(@do_install));
    command("/usr/sbin/pkg_add", "-r", @do_install);
  };

  $p->{remove} = sub {
    my @do_remove;
    foreach my $package (@_) {
      push @do_remove, grep { $_ } map { $_ if grep /^\Q$package\E(?:-.*)?$/, $_ }
          keys %{$p->{installed_packages}};
    }
    return unless @do_remove;
    l "Removing packages: ". join(" ", @do_remove);
    command("/usr/sbin/pkg_delete", @do_remove);
  };

  package_check(@install);
  package_uncheck(@remove);

  # Automatic upgrades are not supported by these package tools
  # TODO(dparrish): Add some kind of port management here
}
# }}}
# {{{ Gentoo Portage
elsif (-f "/usr/bin/emerge") {
  $p->{update} = sub {
    my $p = $m{$hostname}{_packages};
    if (!%{$p->{installed_packages}}) {
    }
  };

  $p->{install} = sub {
    my @do_install;
    my @do_upgrade;
    my $basedir = "/usr/portage";
    foreach my $package (@_) {
      if (!-d "$basedir/$package") {
        my @matches = glob("$basedir/*/$package");
        w "Couldn't find package $package" and next unless @matches;
        throw ConfigException "Multiple packages found installing '$package', specify category too"
          if @matches > 1;
        next unless -d $matches[0];
        $matches[0] =~ s/^$basedir\/*//;
        $package = $matches[0];
      }
      my($category, $shortpackage) = split /\//, $package;
      open(FH, "<$basedir/$package/Manifest")
        or throw LocalFileException "Couldn't read $basedir/$package/Manifest: $!";
      my $latest_version = "";
      while (<FH>) {
        next unless /^EBUILD $shortpackage-(.*?)\.ebuild/;
        $latest_version = $1;
      }
      # Skip installing if the installed version is the latest
      next if $latest_version && -d "/var/db/pkg/$package-$latest_version";

      if (uniq(glob("/var/db/pkg/$package-*"), glob("/var/db/pkg/*/$package-*"),
               glob("/var/db/pkg/*/$package")) || -d "/var/db/pkg/$package") {
        push @do_upgrade, $package;
      } else {
        push @do_install, $package;
      }
    }
    if (@do_install) {
      l "Installing packages: ". join(" ", uniq(@do_install));
      command("emerge", uniq(@do_install));
    }
    if (@do_upgrade) {
      l "Upgrading packages: ". join(" ", uniq(@do_upgrade));
      command("emerge", "-uD", uniq(@do_upgrade));
    }
  };

  $p->{remove} = sub {
    my @do_remove;
    foreach my $package (@_) {
      my $found;
      push @do_remove, $found = $package if -d "/var/db/pkg/$package";
      push @do_remove, map { s!^/var/db/pkg/!!; $_ } grep { /^\/var\/db\/pkg/ }
                           uniq(glob("/var/db/pkg/$package-*"), glob("/var/db/pkg/*/$package-*"),
                                glob("/var/db/pkg/*/$package")) unless $found;;
    }
    return unless @do_remove;
    l "Removing packages: ". join(" ", @do_remove);
    command("emerge", "--unmerge", uniq(@do_remove));
  };

  package_check(@install);
  package_uncheck(@remove);

  if (c("$hostname/emerge/auto_upgrade")) {
    l "Upgrading all installed packages";
    command("emerge", "-uD", "world");
  }
}
# }}}
# {{{ RedHat Enterprise
elsif (i_os("linux") && i_distro("redhat") && -x "/usr/bin/up2date-nox") {
  $p->{update} = sub {
    my $p = $m{$hostname}{_packages};
    if (!%{$p->{installed_packages}}) {
      my %installed_packages;
      v "Building list of installed packages";
      open(FH, "/bin/rpm -q -a --queryformat '%{NAME}\n'|")
          or throw LocalFileException "Could not run rpm: $!";
      while (<FH>) {
        chomp;
        $p->{installed_packages}{$_}++;
      }
      close(FH);
    }
  };

  $p->{install} = sub {
    my $cmd = c("$hostname/up2date/command") || "/usr/bin/up2date-nox";
    my @do_install = grep { !$p->{installed_packages}{$_} } @_;
    return unless @do_install;
    l "Installing packages: ". join(" ", uniq(@do_install));
    command($cmd, "-i", @do_install);
  };

  $p->{remove} = sub {
    my $cmd = c("$hostname/up2date/command") || "/usr/bin/up2date-nox";
    my @do_remove = grep { $p->{installed_packages}{$_} } @_;
    return unless @do_remove;
    l "Removing packages: ". join(" ", @do_remove);
    command("rpm", "-e", @do_remove);
  };

  package_check(@install);
  package_uncheck(@remove);

  if (c("$hostname/up2date/auto_upgrade")) {
    l "Upgrading all installed packages";
    my $cmd = c("$hostname/up2date/command") || "/usr/bin/up2date-nox";
    command($cmd, "-u");
  }
}
# }}}
else {
  w "Don't know how to manage packages on ". i_os(). " ". i_distro();
}

