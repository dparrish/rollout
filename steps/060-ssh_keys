#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl
=head1 NAME

060-ssh_keys

=head1 DESCRIPTION

Manage SSH keys for users to login without passwords.

See L<http://sites.dparrish.com/rollout/ssh-keys> for more information on using this.

=head1 EXAMPLE

  class Sample => {
    user => {
      dparrish => {
        ssh_keys => [ 'dparrish' ],  # This is implied when a dparrish user exists
      },
    },
    ssh_keys_add => [ 'dparrish', 'testuser', 'adminuser' ],
  };

=head1 OPTIONS

=over


=item user/username/ssh_keys

Add the SSH keys to the user's authorized_keys file. Rollout will automatically
look for a key with the same name as he user, so that's not required. This is
for adding other keys, for example to a role account.

=item ssh_keys_add

Add the SSH keys to root's authorized_keys file.

=back

=head1 SKIPPABLE STEPS

=over

=item user_keys

Add keys to individual user's authorized_keys.

=item root_keys

Add keys to root's authorized_keys.

=back

=head1 COPYRIGHT

Copyright 2010 David Parrish

=cut

validate_config {
  user => {
    type => "hash",
    key => {
      help => "Username",
      type => "string",
    },
    value => {
      type => [ "options", "undef" ],
      options => {
        ssh_keys => {
          help => "List of SSH keys to add to the user's authorized_keys",
          type => "list",
          items => { type => "string" },
        },
      },
      fail_on_unknown => 0,
    },
  },
  ssh_keys_add => {
    help => "List of SSH keys to add to root's authorized_keys",
    type => "list",
    items => { type => "string" },
  },
};

return unless i_has("user") || i_has("ssh_keys_add");

my %keys;

if (i_should("user_keys")) {
  my %users = flatten_hash(c("$hostname/user"));
  while (my($username, $user) = each(%users)) {
    next unless $user && $username;
    $keys{$username} ||= { $username => 1 };
    $keys{$username}->{$_}++ foreach (@{$user->{ssh_keys} || []});
  }
}

if (i_should("root_keys")) {
  $keys{root} ||= {};
  $keys{root}->{$_}++ foreach uniq(flatten_list(c("$hostname/ssh_keys_add")));
}

return unless %keys;

my %all_keys;
try {
  my $text = http_file "conf/authorized_keys";
  foreach (split(/[\r\n]+/, $text)) {
    next if ($_ =~ /^#/);
    my($key, $name) = $_ =~ /(.*) ([\w\@\-_]+)$/;
    $all_keys{$name} ||= "";
    $all_keys{$name} .= "$_\n";
  }
} catch HttpException with {
  my($ex) = @_;
  $ex->throw("Can't get authorized_keys file: $ex");
};

foreach (keys %keys) {
  my($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$dir,$shell,$expire) = getpwnam($_);
  w "User $_ doesn't exist" and next unless $name;
  w "User ${name}'s homedir doesn't exist" and next unless -d $dir;
  v "Checking keys for $_ -> ". join(", ", keys %{$keys{$_}});
  foreach (keys %{$keys{$_}}) {
    throw ConfigException "Missing key \"$_\" for user $name, should be in authorized_keys"
      if (!$all_keys{$_} && $_ ne $name);
  }
  v "No keys found for $_" and next unless
    my $text = join("", grep defined, map { $all_keys{$_} } keys %{$keys{$_}});
  dir_check(-dir => "$dir/.ssh", -mode => 0700, -uid => $uid, -gid => $gid);
  text_install(-file => "$dir/.ssh/authorized_keys", -text => $text, -mode => 0644, -uid => $uid,
               -gid => $gid);
}

