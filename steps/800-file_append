#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl
=head1 NAME

800-file_append

=head1 DESCRIPTION

Modify files according to the file_append section

=head1 EXAMPLE

  class Sample => {
    file_append => [
      {
        file => "/etc/aliases",               # The file to change
        add => "root: root\@yourdomain.com",  # The line to add
        match => qr/^root/,                   # Replace any lines matching this regex
        cmd => "newaliases",                  # Run this if the file is changed
        create => 1,                          # Create the file if it doesn't already exist
      },
    ],
  };

=head1 HOOKS

file_append supports adding custom hooks - blocks of Perl code that are run just before the
file_append modification is done, and just after a modification is done. You can add a pre_hook and
a post_hook to each file_append block.

The value must be a CODE ref that takes a single argument - the key of the file_append value to
modify. The item itself will be localized in $_ inside the closure. You can use this code to modify
the item before it is run.

Consider the following example:

  file_append => [
    {
      file => "/tmp/rollout_time.txt",
      add => "Current time: ",
      match => qr/^Current time:/,
      pre_hook => sub {
        my($key) = $_;
        l "The value of \$key before modification is $_->{$key}";
        $_->{$key} .= asctime(localtime);
        l "The value of \$key after modification is $_->{$key}";
      },
    }
  ],

When this file_append entry runs, it will append a line to B</tmp/rollout_tmp.txt> that contains the
current time when the step is run.

There are a set of standard hooks in the HookFactory package that you can use:

=over 4

=item expand_hostname

Replace the token %HOSTNAME% in the string with the current hostname.

=item expand_domain

Replace the token %DOMAIN% in the string with the current domain name (Configured by the
C<domain_name config key).

=item expand_ip

Replace the token %PRIMARY_IP% in the string with the current primary IP address (Configured by
the C<networks> config key).

=item template_replace

Replace multiple template values. This function takes a second parameter, a hash of keys to replace
and their values.

  pre_hook => HookFactory::template_replace("Add", FOOBAR => "foo", BARBAZ => "bar"),

On an input string of C<This %FOOBAR% is really %BARBAZ%> this will output C<This foo is really
bar>.

=back

You can chain multiple hooks together ysing the HookChain() function. Each argument to this function
is a closure that will be called in order.

  pre_hook => HookChain(HookFactory::expand_hostname("add"), HookFactory::expand_domain("add")),

=head1 COPYRIGHT

RolloutNG is based heavily on Rollout (https://github.com/dparrish/rollout) by David Parrish, Copyright 2010.   RolloutNG is Copyright by Chris Donovan 2014.

=cut

validate_config {
  file_append => {
    type => "list",
    items => {
      type => [ "list", "options" ],
      items => { type => [ "string", "regex" ] },
      options => {
        file => { type => "path" },
        add => { type => "string" },
        match => { type => "regex" },
        cmd => { type => "string" },
        create => { type => "boolean" },
        pre_hook => { type => "code" },
        post_hook => { type => "code" },
      },
    },
  },
};

foreach my $entry (flatten_list(c("$hostname/file_append"))) {
  if (ref $entry eq 'ARRAY') {
    w "Deprecated use of file_append, should be HASH";
    file_append(@$entry);
  } elsif (ref $entry eq 'HASH') {
    if ($entry->{'pre_hook'}) {
      local $_ = $entry;
      if ($entry->{pre_hook}()) {
        $entry = $_;
      }
    }
    file_append(map { '-'. $_ => $entry->{$_} } keys %$entry);
    if ($entry->{'post_hook'}) {
      local $_ = $entry;
      $entry->{'post_hook'}();
    }
  } else {
    throw ConfigException "Invalid entry type for file_append";
  }
}
