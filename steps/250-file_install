#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl
=head1 NAME

250-file_install

=head1 DESCRIPTION

=over

=item * Downloads and installs files locally

=item * Create and maintain symlinks

=back

=head1 EXAMPLE

  class Sample => {
    file_install => {
      "/tmp/foobar.txt" => {
        source => "rollout:/files/$hostname/foobar.txt",
        owner => "root",
        group => "root",
        mode => 0600,
      },
      "/tmp/foobar3.txt" => {
        text => "This is some long text\n",
      },
    },
    symlink => {
      "/tmp/foobar2.txt" => "/tmp/foobar.txt",
    },
  };

=head1 OPTIONS

=over

=item file_install/I<path>

Download the given file and install it into path.

=item file_install/I<path>/source

The source of the file. This can be a local file, a HTTP url, or a path starting with rollout: which
will be replaced with the Rollout server's base URL. Either this or text should be specified.

=item file_install/I<path>/text

Raw text to write to the file. Either this or source should be specified.

=item file_install/I<path>/owner

Set the owner. This can be a name or an ID.

=item file_install/I<path>/group

Set the group. This can be a name or an ID.

=item file_install/I<path>/command

Shell command to run after extraction. This command will be run from inside the destination
directory of the extraction.

=back

=head1 COPYRIGHT

Copyright 2010 David Parrish

=cut

validate_config {
  file_install => {
    type => "hash",
    key => {
      help => "Destination path",
      type => "path",
    },
    value => {
      type => "options",
      options => {
        command => { type => "string" },
        gid => { type => "int", range => [0, 65535] },
        group => { type => "string", regex => qr/^[a-z0-9_\-.]+$/ },
        mode => { type => "int", range => [0, 07777] },
        owner => { type => "string", regex => qr/^[a-z0-9_\-.]+$/ },
        source => { type => "string" },
        text => { type => "string" },
        uid => { type => "int", range => [0, 65535] },
      },
    },
  },
  symlink => {
    type => "hash",
    key => {
      help => "Symlink source (create this)",
      type => "path",
    },
    value => {
      help => "Symlink destination (symlink points to this)",
      type => "path",
    },
  },
  symlink_check => {
    type => "hash",
    deprecated => "symlink",
    key => {
      help => "Symlink source (create this)",
      type => "path",
    },
    value => {
      help => "Symlink destination (symlink points to this)",
      type => "path",
    },
  },
};

my %done_files;
my %files = flatten_hash(c("$hostname/file_install"));
while (my($dest, $f) = each(%files)) {
  next if $done_files{$dest}++;
  next unless i_should($dest);
  if ($f->{source}) {
    file_install(-file => $dest, -src => $f->{source}, -cmd => $f->{command} || undef,
                 -owner => $f->{owner}, -group => $f->{group},
                 -mode => $f->{mode}, -uid => $f->{uid}, -gid => $f->{gid});
  } elsif ($f->{text}) {
    if ($f->{text} =~ /^\n?(\s+)/m) {
      my $strip = $1;
      v "Stripping \"$strip\" from the start of text for file: $dest";
      my @text = split(/\n/, $f->{text});
      $f->{text} = "";
      foreach (@text) { s/^$strip//; $f->{text} .= "$_\n"; };
    }
    text_install(-file => $dest, -text => $f->{text}, -cmd => $f->{command} || undef,
                 -owner => $f->{owner}, -group => $f->{group},
                 -mode => $f->{mode}, -uid => $f->{uid}, -gid => $f->{gid});
  }
}

my %symlinks = flatten_hash(c("$hostname/symlink_check"), c("$hostname/symlink"));
while (my($dest, $src) = each %symlinks)
{
  if (ref $src eq 'ARRAY')
  {
    my @list = uniq(@$src);
    validate("You have multiple symlink definitions for $dest, you must only have one.",
             @list == 1);
    $src = $list[0];
  }
  symlink_check($src, $dest);
}
