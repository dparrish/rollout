#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl
=head1 NAME

002-os-detection

=head1 DESCRIPTION

This step doesn't do any configuration, it's used purely to determine the type of system that
Rollout is running on. The data from this step is used in other steps.

B<This is a required step and will always be run, no matter what C<skip_steps> configurations or
C<-o> command line options are specified.>

=head1 EXAMPLE

There is noconfiguration for this step.

=head1 COPYRIGHT

Copyright 2010 David Parrish

=cut

use POSIX;

$m{$hostname}{_os_detection} = {
  type => 'unknown',
  os => 'unknown',
  distro => 'unknown',
  version => 'unknown',
  arch => 'unknown',
};
my $o = $m{$hostname}{_os_detection};
my($sysname, $nodename, $version, $release, $arch) = POSIX::uname();
$o->{version} = $version;
$o->{arch} = $arch;

if ($^O eq 'linux') {
  $o->{type} = 'unix';
  $o->{os} = 'linux';

  if (-f '/etc/redhat-release') {
    ($o->{distro}, $o->{version}) = (lc(slurp_file('/etc/redhat-release')) =~ /^(\w+).*?([\d.]+)/);
    $o->{distro} = 'redhat' if $o->{distro} eq 'red';
  }

  if (-f '/etc/gentoo-release') {
    $o->{distro} = 'gentoo';
    ($o->{version}) = (lc(slurp_file('/etc/gentoo-release')) =~ /^.*?([\d.]+)/);
  }

  if (open(my $fh, '/etc/os-release')) {
    my %info = map { chomp; s/"//g; split /=/; } <$fh>;
    $o->{distro} = $info{ID};
    $o->{version} = $info{VERSION_ID};
  }

  if (!$o->{distro} || $o->{distro} eq 'unknown') {
    chomp($o->{distro} = lc `lsb_release -sd` || 'unknown');
    chomp($o->{version} = lc `lsb_release -sr` || 'unknown');

    # Specific distribution hacks
    $o->{distro} = 'debian' if $o->{distro} =~ /^debian/;
    $o->{distro} = 'ubuntu' if $o->{distro} =~ /^ubuntu/;
    $o->{distro} = 'centos' if $o->{distro} =~ /^"?centos/;
    $o->{distro} = 'opensuse' if $o->{distro} =~ /^"?opensuse/;
    $o->{distro} = 'redhat' if $o->{distro} =~ /^redhat/;
    $o->{distro} = 'redhat' if $o->{distro} =~ /^(?:enterprise)?enterprise[ae]s/;
  }

} elsif ($^O eq 'freebsd') {
  $o->{type} = 'unix';
  $o->{os} = $o->{distro} = 'freebsd';

} elsif ($^O eq 'openbsd') {
  $o->{type} = 'unix';
  $o->{os} = $o->{distro} = 'openbsd';

} elsif ($^O eq 'sunos' || $^O eq 'solaris') {
  $o->{type} = 'unix';
  $o->{os} = $o->{distro} = 'solaris';

} elsif ($^O eq 'aix') {
  $o->{type} = 'unix';
  $o->{os} = $o->{distro} = 'aix';

} elsif ($^O eq 'hpux') {
  $o->{type} = 'unix';
  $o->{os} = $o->{distro} = 'hpux';

} elsif ($^O eq 'irix') {
  $o->{type} = 'unix';
  $o->{os} = $o->{distro} = 'irix';

} elsif ($^O eq 'darwin') {
  $o->{type} = 'unix';
  $o->{os} = $o->{distro} = 'macos';

} elsif (lc $^O eq 'mswin32' || $^O eq 'cygwin') {
  $o->{type} = 'windows';
  $o->{os} = 'windows';
  $o->{distro} = lc $^O;

} elsif ($^O eq 'amigaos' || $^O eq 'beos' || $^O eq 'dos' || $^O eq 'os2') {
  fatal "$^O! Go away!";

} else {
  w "Unknown sysname \"$^O\", OS detection won't work";
  return;
}

v "OS detection: type=$o->{type} os=$o->{os} distro=$o->{distro} version=$o->{version}";

sub i_unix { return $m{$hostname}{_os_detection}{type} eq 'unix' ? 1 : 0 }
sub i_os {
  return $m{$hostname}{_os_detection}{os} unless @_;
  foreach (@_) {
    return 1 if $m{$hostname}{_os_detection}{os} =~ /$_/i;
  }
  return 0;
}
sub i_distro {
  return $m{$hostname}{_os_detection}{distro} unless @_;
  foreach (@_) {
    return 1 if $m{$hostname}{_os_detection}{distro} =~ /$_/i;
  }
  return 0;
}
sub i_os_version { return $m{$hostname}{_os_detection}{version} }
