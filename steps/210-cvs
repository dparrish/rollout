#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl
=head1 NAME

210-cvs

=head1 DESCRIPTION

Check out CVS modules to the local filesystem.

=head1 EXAMPLE

  class Sample => {
    cvspass => {
      # This gets installed to /root/.cvspass
      ':pserver:rollout@cvs.domain:2401/home/cvs' => 'Ahohlasd=',
    },
    cvs => {
      '/tmp/checkout_dir' => {
        module => 'cvs_module',
        rev => 'HEAD',
        repository => ':pserver:rollout@cvs.domain:2401/home/cvs',
        cmd => 'ls -l /tmp/checkout_dir',
      },
    },
    cvsoptions => {
      cvs => '-z3 -q',
      update => '-d -P',
    },
  };

=head1 OPTIONS

=over


=item cvs/I<path>

Check out the given module to path.

=item cvs/I<path>/module

The CVS module name that will be checked out.

=item cvs/I<path>/rev

The revision to check out. If this changes, the current checked out version will be updated to match
the revision specified here..

=item cvs/I<path>/repository

The CVS repository string (CVSROOT environment variable)

=item cvs/I<path>/cmd

A shell command to be run after the checkout or any updates are applied. This

=item command

is run from inside the checked-out directory.

=item cvspass

A list of CVS repositories and the encoded passwords. You can find the passwords for any existing
repositories in the file ~/.cvspass

=item cvsoptions

Default command line flags for each CVS command.

=back

=head1 COPYRIGHT

RolloutNG is based heavily on Rollout (https://github.com/dparrish/rollout) by David Parrish, Copyright 2010.   RolloutNG is Copyright by Chris Donovan 2014.

=cut

validate_config {
  cvapass => {
    type => "hash",
    key => {
      help => "CVSROOT",
      type => "string",
    },
    value => {
      help => "Encoded password",
      type => "string",
    },
  },
  cvs => {
    type => "hash",
    key => {
      type => "path",
    },
    value => {
      type => "options",
      options => {
        module => { type => "string", help => "CVS module name" },
        rev => { type => "string", help => "Revision to check out" },
        repository => { type => "string", help => "CVSROOT" },
        cmd => { type => "string", help => "Post checkout command to run (in checked out dir)" },
      },
    },
  },
  cvsoptions => {
    help => "Options for each cvs command",
    type => "options",
    options => {
      cvs => { type => "string" },
      update => { type => "string" },
      checkout => { type => "string" },
      diff => { type => "string" },
    },
    fail_on_unknown => 0,
  },
};

return unless i_has('cvs');

my %cvspass = flatten_hash(c("$hostname/cvspass"));
while (my($user, $pass) = each %cvspass) {
  file_append(-file => "/root/.cvspass", -add => "/1 $user $pass", -match => qr/ $user /,
              -uid => 0, -gid => 0, -mode => 0600, -create => 1);
}

my %o = flatten_hash(c("$hostname/cvsoptions"));
$o{cvs} ||= "-z3 -q";
$o{update} ||= "-d -P";
$o{checkout} ||= "-P";
$o{diff} ||= "-u -b -B";

file_append(-file => "/root/.cvsrc", -add => "$_ $o{$_}", -match => qr/^$_/, -create => 1)
  foreach keys %o;

my %cvs = flatten_hash(c("$hostname/cvs"));
return unless %cvs;

while (my($dir, $x) = each(%cvs)) {
  w "No module specified for $dir" or next unless $x->{module};

  cvs_checkout(-dest => $dir, -module => $x->{module}, -rev => $x->{rev}, -repo => $x->{repository},
               -cmd => $x->{post_cmd});
}
