#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl
=head1 NAME

950-iptables

=head1 DESCRIPTION

Build and activate firewall rules, using iptables.

This generates a file suitable for loading with C<iptables-restore>. The file contains a set of
basic default rules that allow acceptable limits of ICMP, allow whatever is specified in the
C<firewall_accept> block, and reject anything else.

Comments can be added by adding a hash character followed by the comment.

B<WARNING:> If you have I<any> C<firewall_accept> blocks, this step will be enabled. If you don't
have any blocks that allow your SSH access, your session will be disconnected as soon as you run
rollout. B<Be careful.>

This is a I<dangerous step>. It will no make any changes to your system unless forced, using the
C<-f iptables> command line parameter. This is to ensure that running rollout with the default
options won't make your system inaccessable.

=head1 EXAMPLE

  class Sample => {
    firewall_accept => [
      home => '22 # ssh',
      any => '80',
      '192.168.1.0/24' => '53:udp # DNS',
    ],
    firewall_drop => [
      '192.168.1.10' => '53:udp',
    ],
  };

=head1 SKIPPABLE STEPS

=over

=item firewall

Configure the local host-based firewall

=item iptables

Configure the local host-based firewall using iptables

=back

=head1 COPYRIGHT

Copyright 2010 David Parrish

=cut

validate_config {
  firewall_accept => {
    help => "List of source addresses and destination ports to accept",
    type => "list",
    items => {
      type => "string",
    },
  },
  firewall_drop => {
    help => "List of source addresses and destination ports to reject",
    type => "list",
    items => {
      type => "string",
    },
  },
  firewall_append => {
    help => "List of iptables rules to inject at the end of the ruleset (before drop)",
    type => "list",
    items => {
      type => "string",
    },
  },
};

dangerous_step;

return unless i_should("firewall") && i_should('iptables');
my @accept = flatten_list(c("$hostname/firewall_accept"), c("$hostname/firewall_allow"));
my @drop = flatten_list(c("$hostname/firewall_drop"), c("$hostname/firewall_deny"));
my @append = flatten_list(c("$hostname/firewall_append"));
return unless (@accept || @drop || @append);

# Make sure iptables is installed
if (i_distro("debian", "ubuntu")) {
  package_check("iptables");
  dir_check("/var/lib/iptables");
  file_modify("/etc/default/iptables", undef,
              [ 's/enable_autosave=true/enable_autosave=false/',
                's/enable_save_counters=true/enable_save_counters=false/' ])
    if -f "/etc/default/iptables";
}
elsif (i_distro("redhat")) {
  package_check("iptables");
}
else {
  w "Don't know how to manage iptables on ". i_os(). " ". i_distro();
}

my @rules;
push @rules, (
  "*filter",
  ":INPUT ACCEPT [0:0]",
  ":FORWARD ACCEPT [0:0]",
  ":OUTPUT ACCEPT [0:0]",
  "# Standard setup",
  "-A INPUT -i lo -j ACCEPT",
  "-A INPUT -p icmp --icmp-type echo-reply -j ACCEPT",
  "-A INPUT -p icmp --icmp-type destination-unreachable -j ACCEPT",
  "-A INPUT -p icmp --icmp-type time-exceeded -j ACCEPT",
  # limit any other ICMP to 2 per second
  "-A INPUT -p icmp --icmp-type any -m limit --limit 6/second -j ACCEPT",
  "-A INPUT -d 224.0.0.251 -p udp -m udp --dport 5353 -j ACCEPT",
  "-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT",
  "# Drop broadcast traffic",
  "-A INPUT -d 255.255.255.255 -j DROP",
  "# Host specific rules",
);

push @rules, "-A INPUT -p udp --sport bootps -j DROP" unless i_isa("Dhcp_Server");

sub add_rules {
  my $action = shift;
  for (my $i = 0; $i < @_; $i += 2) {
    my($source, $port) = ($_[$i], $_[$i + 1]);
    if ($source =~ /^#/) {
      push @rules, $source;
      $i--;
      next;
    }
    my $comment = "";
    $comment = $1 if ($port =~ s/\s*\#\s*(.*?)\s*$//);
    my $proto = "tcp";
    $proto = $1 if ($port =~ s/:(udp|tcp)$//);

    my @hosts = $source eq 'any' ? () : _expand_network($source);
    if ($source ne 'any' && $source =~ /[a-zA-Z]/ && !@hosts) {
      # Class name, skip it
      w "Can't expand network $source" and next if $source =~ /^[A-Z]/;
      # All lower case, assume it's a host name
      @hosts = ($source);
    }
    @hosts = (undef) unless @hosts;
    push @rules, "# $action $port from $source";
    push @rules, "-A INPUT". ($_ ? " -s $_" : ""). " -p $proto --dport $port -j $action". (length($comment) ? " -m comment --comment \"$comment\"" : "")
      foreach @hosts;
  }
}

add_rules('DROP', @drop);
add_rules('ACCEPT', @accept);
push @rules, @append;

push @rules, (
  "# Log & Reject everything else",
  "-A INPUT -j LOG --log-prefix \"DENY INPUT \" --log-tcp-sequence --log-ip-options",
  "-A INPUT -p tcp -j REJECT --reject-with tcp-reset",
  "-A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable",
  "-A INPUT -j REJECT",
  "# Don't forward anything",
  "-A FORWARD -j DROP",
  "COMMIT",
);

my @nat_append = flatten_list(c("$hostname/firewall_nat_append"));
if (@nat_append && i_should("firewall_nat_append")) {
  push @rules,
    "*nat",
    ":PREROUTING ACCEPT [0:0]",
    ":POSTROUTING ACCEPT [0:0]",
    ":OUTPUT ACCEPT [0:0]",
    @nat_append,
    "COMMIT";
}

my @mangle_append = flatten_list(c("$hostname/firewall_mangle_append"));
if (@mangle_append && i_should("firewall_mangle_append")) {
  push @rules,
    "*mangle",
    ":PREROUTING ACCEPT [0:0]",
    ":INPUT ACCEPT [0:0]",
    ":FORWARD ACCEPT [0:0]",
    ":OUTPUT ACCEPT [0:0]",
    ":POSTROUTING ACCEPT [0:0]",
    @mangle_append,
    "COMMIT";
}

my $changes = 0;
my $text = join("", map { "$_\n" } @rules);
if (i_distro("redhat")) {
  text_install("/etc/sysconfig/iptables", $text,
               "iptables-restore /etc/sysconfig/iptables") and $changes++;
} elsif (i_distro("debian", "ubuntu")) {
  dir_check("/var/lib/iptables");
  text_install("/var/lib/iptables/active", $text,
               "iptables-restore /var/lib/iptables/active") and $changes++;
}

if ($safe_mode && $changes) {
  w "Firewall config is considered dangerous, changes won't be applied unless you specify the ".
    "\"-f iptables\" argument.";
}
