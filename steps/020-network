#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl
=head1 NAME

020-network

=head1 DESCRIPTION

This step configures networking:

=over 4

=item * Configure all interfaces, statically or with DHCP

=item * Add static routes

=item * Modify C</etc/resolv.conf> with nameservers and resolver options

=item * Set the local hostname and domain name

=back

This is a I<dangerous step>. It will no make any changes to your system unless forced, using the
C<-f network> command line parameter. This is to ensure that running rollout with the default
options won't make your system inaccessable.

=head1 EXAMPLE

  class Sample => {
    domain_name => "example.com",
    nameservers => [ '10.9.8.100', '10.9.8.200' ],
    dns_search => [ "exaxmple.com", "env1.example.com", "env2.example.com" ],
    interfaces => {
      eth0 => {
        primary => 1,
        ip => '192.168.1.5',
        netmask => '255.255.255.0',
        gateway => '192.168.1.1',
        mac => '00:50:8d:6d:c6:0c', # If not specified, the OS will choose which int is eth0
        routes => {
          '10.0.0.1/24' => '192.168.1.1', # Route via a gateway
          '10.0.0.0/24' => undef,         # Route directly out this interface
        },
      },
      'eth0:1' => {
        family => 'inet6',
        method => 'static',
        ip => '2002:389:d010:7d00:251:9dff:fe6d:c60c',
        netmask => 64,
        gateway => '2002:389:d010:7d00',
      },
      eth1 => {
        disabled => 1, # This interface will be added but not enabled
        mac => '00:50:8d:6d:c6:0d',
      },
      ppp0 => {
        method => 'ppp',
        provider => 'dsl-provider', # A filename in /etc/ppp/peers
      },
      eth2 =>{
        dhcp => 1,
        mac => '00:50:8d:6d:c6:0e',
        hostname => 'test-client',
      },
      # Bonding interface created from eth0 & eth1 which should not already be configured
      bond0 => {
        ip => '192.168.1.5',
        netmask => '255.255.255.0',
        gateway => '192.168.1.1',
        bond => [ 'eth0', 'eth1' ],
        'bond-mode' => '802.3ad',
        'bond-miicom' => 100,
        'bond-lacp-rate' => 1,
        'bond-slaves' => 'none',
        multicast => 'no',
        stp => 'off',
      },
    },
  };

=head1 OPTIONS

=over

=item interfaces/I<int>/primary

This is the primary interface for the client. This address will be used for all operations on other
clients when talking to this system.

=item interfaces/I<int>/ip

The IP address for this interface. Either this or dhcp is normally required for every interface.
This can be an IPv4 or IPv6 address.

=item interfaces/I<int>/netmask

The network netmask for this interface. This should be specified if C<ip> is.

=item interfaces/I<int>/gateway

Set the default route out this interface via this given router IP.

=item interfaces/I<int>/disabled

If set, the interface will be configured, but set to not start on startup. This is useful for
dynamically enabled interfaces such as dialup.

=item interfaces/I<int>/mac

Force this interface to be the one with the given MAC address. Many systems will dynamically assign
interface numbers based on the order they are initialized. Using this option, interfaces will always
have the correct name when hardware is changed.

=item interfaces/I<int>/routes

Add specific host or network routes via this interface.

=item interfaces/I<int>/mac

Force this interface to be the one with the given MAC address. Many systems will dynamically assign
interface numbers based on the order they are initialized. Using this option, interfaces will always
have the correct name when hardware is changed.

=item interfaces/I<int>/method

Which method to use for configuring the interface. Only C<ppp> is useful here.

=item interfaces/I<int>/provider

The ppp provider to connect to this interface.

=item interfaces/I<int>/dhcp

Configure this interface using DHCP.

=item interfaces/I<int>/hostname

The hostname that will be sent with the DHCP request.

=item interfaces/I<int>/bond

Sets the list of physical devices that will be bonded to create this virtual interface. Only useful
for bonding interfaces.

=item resolver/timeout

The number of seconds before a DNS request times out.

=item resolver/attempts

The number of times each DNS server will be tried before moving to the next.

=item nameservers

A list of IP address of preferred DNS name servers.

=item domain_name   The local domain name

=item dns_search   The search suffix(es) for resolv.conf

=back

=head1 SKIPPABLE STEPS

=over

=item interface

Configure network interfaces

=item iftab

Configure logical to physical interface mapping (by MAC address)

=item bond

Configure bonded interfaces

=item bridge

Configure bridging interfaces

=item routes

Add static routes

=item hostname

Set the local hostname

=item domain_name

Set the local domain name

=item dns_search

Set the search suffix(es) for DNS lookups in resolv.conf

=item resolvconf

Modify /etc/resolv.conf, including name servers and resolver options.

=back

=head1 COPYRIGHT

Copyright 2010 David Parrish

=cut

validate_config {
  interfaces => {
    help => "Configuration for all network interfaces",
    type => "hash",
    key => {
      help => "Interface name",
      type => "string",
    },
    value => {
      help => "Interface configuration",
      type => "options",
      options => {
        arp => { type => "string" },
        bond => { type => "list", items => { type => "string" } },
        'bond-mode' => { type => "string" },
        'bond-miicom' => { type => "int" },
        'bond-lacp-rate' => { type => "int" },
        'bond-slaves' => { type => "string" },
        'bond-arp-interval' => { type => "int" },
        'bond-arp-ip-target' => { type => "ip" },
        'bond-primary' => { type => "string" },
        bootfile => { type => "string" },
        bootproto => { type => "string" },
        bridge => { type => "string" },
        broadcast => { type => "ip" },
        client => { type => "string" },
        dhcp => { type => "boolean" },
        disabled => { type => "boolean" },
        endpoint => { type => "string" },
        family => { type => "string" },
        frame => { type => "string" },
        gateway => { type => "ip" },
        hostname => { type => "string" },
        hwaddress => { type => "string", regex => qr/^([0-9a-f][0-9a-f]:){5}[0-9a-f][0-9a-f]$/i },
        inactive => { type => "boolean" },
        ip => { type => "ip" },
        ipv6 => { type => "int" },
        leasehours => { type => "int" },
        leasetime => { type => "string" },
        local => { type => "string" },
        mac => { type => "string", regex => qr/^([0-9a-f][0-9a-f]:){5}[0-9a-f][0-9a-f]$/i },
        media => { type => "string" },
        method => { type => "string" },
        metric => { type => "int" },
        mtu => { type => "int" },
        multicast => { type => "string" },
        netmask => { type => "ip" },
        netnum => { type => "int" },
        network => { type => "ip" },
        pointopoint => { type => "string" },
        primary => { type => "boolean" },
        provider => { type => "string" },
        routes => { type => "hash" },
        server => { type => "string" },
        stp => { type => "string" },
        ttl => { type => "int" },
        type => { type => "string" },
        userctl => { type => "string" },
        vendor => { type => "string" },
        'pre-up' => { type => "list", items => { type => "string" } },
        'pre-down' => { type => "list", items => { type => "string" } },
        'post-up' => { type => "list", items => { type => "string" } },
        'post-down' => { type => "list", items => { type => "string" } },
      },
      fail_on_unknown => 1,
    },
  },
  resolver => {
    type => "options",
    options => {
      timeout => {
        help => "Timeout for the system resolver in seconds",
        type => "int",
        range => [0, 300],
      },
      attempts => {
        help => "Number of attempts for each dns server",
        type => "int",
        range => [0, 100],
      },
    },
  },
  nameservers => {
    help => "List of IP addresses of local name servers",
    type => "list",
    items => { type => "ip" },
  },
  domain_name => {
    help => "Domain name to append to the hostname",
    type => "domainname",
  },
  dns_search => {
    help => "Domain names to use for non-FQDN DNS lookups",
    type => "list",
    items => {
      help => "Domain names",
      type => "domainname",
    },
  },
};

dangerous_step;

my $changes = 0;

my %ints = flatten_hash(c("$hostname/interfaces"));

# {{{ RedHat
if (i_should("interface") && -d "/etc/sysconfig/network-scripts") {
  # RedHat style
  my %interface_files;
  while (my($device, $d) = each %ints) {
    next if $d->{disabled};
    my %c = (
      device => $device,
      type => "Ethernet",
      ipv6init => "". ($d->{ipv6} ? "yes" : "no"),
      userctl => "no",
      onboot => "". ($d->{inactive} ? "no" : "yes"),
    );
    foreach (qw( gateway bootproto type stp arp multicast userctl netmask bridge )) {
      $c{$_} = $d->{$_} if defined $d->{$_};
    }
    $c{hwaddr} = $d->{mac} if defined $d->{mac} && i_should("iftab");

    if ($d->{ip}) {
      $c{ipaddr} = $d->{ip};
      $c{netmask} ||= "255.255.255.0";
    } elsif ($d->{dhcp}) {
      $c{bootproto} = "dhcp";
      $c{dhcp_hostname} = ($d->{dhcp} !~ /^1$/ ? $d->{dhcp} : $hostname),
      $c{peerdns} = "yes";
    }
    $interface_files{$device} ||= \%c;

    if (i_should("bond")) {
      if ($device =~ /^bond(\d+)/) {
        foreach (@{$d->{slaves} || $d->{bond} || []}) {
          # Create a device entry for each slave interface
          my %c = (
            device => $_,
            onboot => "no",
            type => "Ethernet",
            master => $device,
            slave => "yes",
            peerdns => "yes",
            userctl => "no",
            ipv6init => "no",
          );
          $c{hwaddr} = $m{$hostname}->{interfaces}{$_}{mac}
            if i_should("iftab") && $m{$hostname}->{interfaces}{$_}{mac};
          $interface_files{$_} = \%c;
        }
      }
    }

    if (i_should("routes")) {
      my $routes = join("", map { "$_ via $d->{routes}->{$_} dev $device\n" }
        keys %{$d->{routes} || {}});
      if ($routes && text_install("/etc/sysconfig/network-scripts/route-$device", $routes, undef,
          { mode => 0644 })) {
        $changes++;
        if (!$safe_mode) {
          w "Network configuration has been changed for $device, you must restart the interface ".
            "manually to apply the changes.";
        }
      }
    }
  }

  my $alerted = 0;
  if (keys %interface_files) {
    if (i_should("bond")) {
      if (grep /^bond\d+$/, keys %interface_files) {
        file_append("/etc/modprobe.conf",
                    "options bonding mode=1 miimon=100 downdelay=300 updelay=300 max_bonds=4",
                    qr/^options bond(?:\d+|ing) /);
      }
    }
    while (my($int, $c) = each %interface_files) {
      file_append("/etc/modprobe.conf", "alias $int bonding", qr/^alias $int/)
        if i_should("bond") && $int =~ /^bond\d+$/;

      if (text_install("/etc/sysconfig/network-scripts/ifcfg-$int",
                       join("", map { uc($_). "=$c->{$_}\n" } sort keys %$c), undef, { mode => 0644 })) {
        $changes++;
        if (!$safe_mode) {
          w "Network configuration has been changed for $int, you must restart the interface ".
            "manually to apply the changes.";
        }
      }
    }
  }
}
# }}}
# {{{ Debian
elsif (i_should("interface") && -f "/etc/network/interfaces") {
  my %interfaces = (
    lo => {
      _auto => 1,
      _addrfam => 'inet',
      _method => 'loopback',
    },
  );
  my %macs;
  while (my($device, $d) = each %ints) {
    my %x = (
      _auto => $d->{disabled} ? 0 : 1,
      _addrfam => $d->{family} || 'inet',
      _method => $d->{dhcp} ? 'dhcp' : ($d->{method} || "static"),
      _mac => $d->{mac},
      address => $d->{ip},
      netmask => $d->{netmask} || ($d->{ip} ? "255.255.255.0" : undef),
      'pre-up' => [],
      up => [],
      'post-up' => [],
      'pre-down' => [],
      down => [],
      'post-down' => [],
    );
    # This is a list of all the options that can be specified, according to interfaces(5)
    $x{$_} = $d->{$_}
      foreach qw( bootfile broadcast client gateway hostname hwaddress leasehours leasetime media
                  metric mtu network pointopoint provider server vendor frame netnum endpoint local
                  ttl bond-mode bond-miicom bond-lacp-rate bond-slaves bond-primary
                  bond-arp-interval bond-arp-ip-target );
    push @{$x{$_}}, ref $d->{$_} ? @{$d->{$_}} : $d->{$_}
      foreach qw( pre-up up post-up pre-down down post-down );

    if (i_should("bond") && $d->{bond}) {
      # Bonding Interfaces
      foreach my $slaves ($d->{bond}) {
        foreach my $slave (@$slaves) {
          $interfaces{$slave} = {
            _auto => $slave,
            _addrfam => "inet",
            _method => "manual",
            'bond-master' => $device,
          };
        }
      }
    }

    if (i_should("bridge") && $d->{bridge}) {
      # Bridging Interface
      $m{$hostname}->{packages} ||= [];
      push @{$m{$hostname}->{packages}}, "bridge-utils";
      $x{bridge_ports} = join(" ", @{$d->{bridge}});
      $x{bridge_fd} = $d->{bridge_fd} || 9;
      $x{bridge_hello} = $d->{bridge_hello} || 2;
      $x{bridge_maxage} = $d->{bridge_maxage} || 12;
      $x{bridge_stp} = $d->{bridge_stp} || "off";
    }

    if (i_should("routes")) {
      while (my($dest, $gw) = each(%{$d->{routes} || {}})) {
        if ($dest =~ /\//) {
          $dest = "-net $dest";
        } else {
          $dest = "-host $dest";
        }
        if ($gw) {
          push @{$x{up}}, "route add $dest gw $gw";
        } else {
          push @{$x{up}}, "route add $dest dev $device";
        }
      }
    }
    $interfaces{$device} = \%x;
  }

  if (keys %interfaces) {
    my $text = "# This file describes the network interfaces available on your system\n".
               "# and how to activate them. For more information, see interfaces(5).\n";
    while (my($name, $int) = each %interfaces) {
      next if $int->{_disabled};
      $text .= "\n";
      $text .= "auto $name\n" if $int->{_auto};
      $text .= "iface $name $int->{_addrfam} $int->{_method}\n";
      foreach my $k (grep { defined $int->{$_} } sort keys %$int) {
        next if $k =~ /^_/;
        if (ref $int->{$k} eq 'ARRAY') {
          $text .= "\t$k $_\n" foreach grep { defined $_ } @{$int->{$k}};
        } else {
          $text .= "\t$k $int->{$k}\n" unless ref $int->{$k};
        }
      }

      if ($int->{_mac} && i_should("iftab")) {
        if (-f "/etc/udev/rules.d/70-persistent-net.rules") {
          file_append(-file => "/etc/udev/rules.d/70-persistent-net.rules",
                      -add => "SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ".
                              "ATTR{address}==\"$int->{_mac}\", ATTR{dev_id}==\"0x0\", ".
                              "ATTR{type}==\"1\", KERNEL==\"eth*\", NAME=\"$name\"",
                      -match => qr/NAME=['"]$name['"]/) && $changes++;
        } elsif (-f "/etc/iftab") {
          file_append(-file => "/etc/iftab",
                      -add => "$name mac $int->{_mac} arp 1",
                      -match => qr/^$name/) && $changes++;
        }
      }
    }

    if (text_install("/etc/network/interfaces", $text)) {
      $changes++;
      if (!$safe_mode) {
        w "Network configuration has been changed, you must restart the interfaces manually to ".
          "apply the changes.";
      }
    }
  }
}
# }}}
# {{{ Solaris
elsif (i_should("interface") && i_os("solaris")) {
  while (my($device, $int) = each %ints) {
    v "Configuring $device";
    if (-f "/etc/nwam/llp" && $int->{dhcp}) {
      # OpenSolaris
      next if $int->{disabled};
      if ($int->{dhcp}) {
        command("svcadm disable svc:/network/physical:default");
        command("svcadm enable svc:/network/physical:nwam");
        file_append(-file => "/etc/nwam/llp", -add => "$device dhcp\n$device priority 0\n",
                    -match => qr/^$device\s/);
      }
    } else {
      # Normal Solaris
      if (-f "/etc/nwam/llp") {
        command("svcadm disable svc:/network/physical:nwam");
        command("svcadm enable svc:/network/physical:default");
      }
      if ($int->{disabled}) {
        if (-f "/etc/hostname.$device") {
          l "Disabling interface $device";
          unlink("/etc/hostname.$device") unless $safe_mode;
        }
        next;
      }
      text_install("/etc/hostname.$device", "${hostname}_$device") if $int->{ip};
      text_install("/etc/defaultrouter", $int->{gateway}) if $int->{gateway};
      $m{$hostname}{hosts_append} ||= {};
      $m{$hostname}{hosts_append}{"${hostname}_$device"} = $int->{ip};
    }
  }
}
# }}}

if (i_should("hostname")) {
  my $oldhostname = hostname;
  if (i_os("solaris")) {
    if ($oldhostname ne $hostname) {
      l "Changing hostname from $oldhostname to $hostname";
      command("hostname", $hostname);
      $changes++;
    }
    text_install(-file => "/etc/nodename", -text => "$hostname\n", -uid => 0, -mode => 0644);
    file_modify(-file => $_, -modify => [ "s/$oldhostname/$hostname/g" ])
      for glob("/etc/net/*/hosts");
    dir_check("/var/crash/$hostname", 0700) && command("dumpadm", "-s", "/var/crash/$hostname");
  } elsif (i_os("freebsd")) {
    if ($oldhostname ne $hostname) {
      l "Changing hostname from $oldhostname to $hostname";
      command("hostname", $hostname);
      $changes++;
    }
    file_append(-file => "/etc/rc.conf.local", -add => "hostname=\"$hostname\"",
                -match => qr/^#?\s*hostname=/, -create => 1);
  } elsif (i_os("linux")) {
    if ($oldhostname ne $hostname) {
      l "Changing hostname from $oldhostname to $hostname";
      command("hostname", $hostname);
      $changes++;
    }
    if (-f "/etc/hostname") {
      text_install(-file => "/etc/hostname", -text => "$hostname\n", -uid => 0, -mode => 0644);
    } elsif (-f "/etc/HOSTNAME") {
      text_install(-file => "/etc/HOSTNAME", -text => "$hostname\n", -uid => 0, -mode => 0644);
    } elsif (-f "/etc/sysconfig/network") {
      file_modify(-file => "/etc/sysconfig/network",
                  -modify => [ "s/^HOSTNAME=.*/HOSTNAME=$hostname/" ]);
    }
  } else {
    if ($oldhostname ne $hostname) {
      w "Don't know how to set the hostname on ". i_os(). " ". i_distro();
    }
  }
}

if (i_should("resolvconf")) {
  my @options;
  push @options, "timeout:". c("$hostname/resolver/timeout") if c("$hostname/resolver/timeout");
  push @options, "attempts:". c("$hostname/resolver/attempts") if c("$hostname/resolver/attempts");
  if (@options) {
    file_append(-file => "/etc/resolv.conf", -add => "options ". join(" ", @options),
                -match => qr/^options/) && $changes++;
  }
  if (c("$hostname/nameservers")) {
    file_append(-file => "/etc/resolv.conf",
                -add => join("", map { "nameserver $_\n" }
                             uniq(flatten_list(c("$hostname/nameservers")))),
                -match => qr/^nameserver\b/) && $changes++;
  }
  if (i_should("domain_name") && !c("$hostname/dns_search")) {
    foreach (c("$hostname/domain_name")) {
      file_append("/etc/resolv.conf", "domain $_", qr/^domain /);
      last;
    }
  }
  if (i_should("dns_search")) {
    if (c("$hostname/dns_search")) {
      file_append("/etc/resolv.conf", "search " . join(" ", @{c("$hostname/dns_search")}), qr/^search.*$/);
    }
  }
}

if ($safe_mode && $changes) {
  w "Network config is considered dangerous, changes won't be applied unless you specify the ".
    "\"-f network\" argument.";
}
