#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl
=head1 NAME

050-users

=head1 DESCRIPTION

Add, remove and modify users and groups.

=head1 EXAMPLE

  class Sample => {
    user => {
      testuser => {
        name => "Full User Name",
        uid => 1000,
        gid => 1000,
        groups => ["testgroup", "wheel"],
        password => '12345',       # Preferably specify a MD5 encoded password instead of plaintext
        force_password => 1,       # Reset the password if it's changed on the system
        home => "/home/testuser",  # Create home directory here
        shell => "/bin/bash",
        ssh_keys => ["testuser"],
        homedir_mode => 0750,
      },
      baduser => undef,  # Remove this user
    },
    group => {
      testgroup => {
        gid => 998,
      },
      badgroup => undef,  # Remove this group
    },
  };

=head1 OPTIONS

=over


=item user/C<username>

Configure a user with this username. If the value is undef, the user will be deleted.

=item user/C<username>/name

The full name (GECOS field) for the user

=item user/C<username>/uid

Force the user ID, otherwise it will be assigned by the system when the user is created.

=item user/C<username>/gid

Force the group ID, otherwise it will be assigned by the system when the user is created.

=item user/C<username>/groups

A list of extra groups that the user should be a member of

=item user/C<username>/home

Create a home directory at this location for the user. The permissions will be set according to the
homedir_mode option, but the owner will always be this user.

=item user/C<username>/ssh_keys

A list of SSH key names that will be allowed to connect as this user without using a password. See
http://sites.dparrish.com/rollout/ssh-keys for details on this option.

=item group/C<groupname>/gid

Force the group ID, otherwise it will be assigned by the system when the group is created.

=back

=head1 SKIPPABLE STEPS

=over


=item groups

Configure groups

=item users

Configure users

=item force_password

Reset passwords if they have been changed

=back

=head1 COPYRIGHT

Copyright 2010 David Parrish

=cut


# Available skip_steps items:
#  users - Create and update user entries
#  groups - Create and update group entries
#  force_password - Reset user's passwords if they have changed them

validate_config {
  group => {
    type => "hash",
    key => {
      help => "Group name",
      type => "string",
    },
    value => {
      help => "Group definition",
      type => [ "options", "undef" ],
      options => {
        gid => { type => "int" },
      },
    },
  },
  user => {
    type => "hash",
    key => {
      help => "Username",
      type => "string",
    },
    value => {
      type => [ "options", "undef" ],
      options => {
        force_password => { type => "boolean" },
        gid => { type => "int" },
        groups => { type => "list", items => { type => "string" } },
        home => { type => "path" },
        name => { type => "string" },
        password => { type => "string" },
        shell => { type => "path" },
        ssh_keys => { type => "list", items => { type => "string" } },
        uid => { type => "int" },
        homedir_mode => { type => "int", range => [0, 07777], help => "Mode for home directory" },
      },
    },
  },
};

my %groups = flatten_hash(c("$hostname/group"));
my %users = flatten_hash(c("$hostname/user"));

if (i_should("groups") && %groups) {
  # Deal with groups first
  v "Checking groups: ". join(" ", keys %groups);
  while (my($name, $group) = each(%groups)) {
    next unless defined $group;
    my $gid = getgrnam($name);
    if (!$gid) {
      # Create Group
      l("Create group $name");
      if (i_os("linux")) {
        command("groupadd", ($group->{gid} ? ("-g", $group->{gid}, "-f") : ()), $name);
      } elsif (i_os("freebsd")) {
        command("pw", "groupadd", $name, ($group->{gid} ? ("-g", $group->{gid}) : ()));
      } elsif (i_os("solaris")) {
        command("groupadd", ($group->{gid} ? ("-g", $group->{gid}) : ()), $name);
      } else {
        throw ConfigException "Don't know how to create groups on ". i_os();
      }
    } else {
      # Group exists
      if ($group->{gid} && $group->{gid} != $gid) {
        l("Update gid for $name");
        if (i_os("linux")) {
          command("groupmod", "-g", $group->{gid}, "-o", $name);
        } elsif (i_os("freebsd")) {
        command("pw", "groupmod", $name, ($group->{gid} ? ("-g", $group->{gid}) : ()));
        } elsif (i_os("solaris")) {
          command("groupmod", "-g", $group->{gid}, "-o", $name);
        } else {
          throw ConfigException "Don't know how to modify groups on ". i_os();
        }
      }
    }
  }
}


# Now all the users
if (i_should("users") && %users) {
  v "Checking users: ". join(" ", keys %users);

  while (my($username, $user) = each(%users)) {
    next unless defined $user;
    $user->{name} ||= "";
    $user->{name} =~ s/\$hostname/$hostname/;
    $user->{homedir_mode} ||= 0750;

    my($name, $passwd, $uid, $gid, $quota, $comment, $gcos, $dir, $shell, $expire) =
      getpwnam($username);

    if (!$name) {
      # Create User
      l "Create user $username";
      my $base_homedir = dirname($user->{home});
      dir_check(-dir => $base_homedir, -uid => 0, -gid => 0, -mode => 0755) if ! -d $base_homedir;
      if (i_os("linux")) {
        command("useradd",
          ($user->{uid} ? ("-u", $user->{uid}, "-o") : ()),
          ($user->{gid} ? ("-g", $user->{gid}) : ()),
          ($user->{groups} ? ("-G", join(",", @{$user->{groups}})) : ()),
          ($user->{home} ? ("-d", $user->{home}, "-m") : ()),
          ($user->{password} ? ("-p", $user->{password}) : ()),
          ($user->{name} ? ("-c", $user->{name}) : ()),
          ($user->{shell} ? ("-s", $user->{shell}) : ()),
          $username
        );
      } elsif (i_os("freebsd")) {
        next if $safe_mode;
        open(FH, "|adduser -q -f");
        print FH join(":",
          $username,
          $user->{uid} || "",
          $user->{gid} || "",
          "",
          "",
          "",
          $user->{name} || "",
          $user->{home} || "",
          $user->{shell} || "",
          ""). "\n";
        close(FH);
        if ($user->{password}) {
          open(FH, "|pw user mod $username -H 0");
          print FH "$user->{password}\n";
          close(FH);
        }
      } elsif (i_os("solaris")) {
        command("useradd",
          ($user->{uid} ? ("-u", $user->{uid}, "-o") : ()),
          ($user->{gid} ? ("-g", $user->{gid}) : ()),
          ($user->{groups} ? ("-G", join(",", @{$user->{groups}})) : ()),
          ($user->{home} ? ("-d", $user->{home}, "-m") : ()),
          ($user->{name} ? ("-c", $user->{name}) : ()),
          ($user->{shell} ? ("-s", $user->{shell}) : ()),
          $username
        );
      } else {
        throw ConfigException "Don't know how to create users on ". i_os();
      }
    } else {
      # User exists
      delete $user->{force_password} unless i_should("force_password");
      my $modify = 0;
      $modify++ if $user->{uid} && $user->{uid} != $uid;
      $modify++ if $user->{home} && ($user->{home} ne $dir || !-d $dir);
      $modify++ if i_os("linux") && $user->{password} && $user->{password} ne $passwd
                   && $user->{force_password};
      $modify++ if $user->{shell} && $user->{shell} ne $shell;
      $modify++ if $user->{name} && $user->{name} ne $gcos;
      if ($user->{groups}) {
        foreach (@{$user->{groups}}) {
          my($gname,$gpasswd,$ggid,$gmembers) = getgrnam($_);
          if ($gname) {
            if (!grep({ $_ eq $name } split(/ /, $gmembers))) {
              v "$name should be in ". join(" ", @{$user->{groups}}). ", but isn't in all";
              $modify++;
            }
          }
        }
      }
      if ($modify) {
        l "Updating user $username";
        if (i_os("linux")) {
          command("usermod",
            ($user->{uid} ? ("-u", $user->{uid}, "-o") : ()),
            ($user->{gid} ? ("-g", $user->{gid}) : ()),
            ($user->{groups} ? ("-a", "-G", join(",", @{$user->{groups}})) : ()),
            ($user->{home} ? ("-d", $user->{home}, "-m") : ()),
            ($user->{password} && $user->{force_password}
              ? ("-p", $user->{password}) : ()),
            ($user->{name} ? ("-c", $user->{name}) : ()),
            ($user->{shell} ? ("-s", $user->{shell}) : ()),
            $username
          );
        } elsif (i_os("freebsd")) {
          command("pw", "usermod", $username,
            ($user->{uid} ? ("-u", $user->{uid}, "-o") : ()),
            ($user->{gid} ? ("-g", $user->{gid}) : ()),
            ($user->{groups} ? ("-G", join(",", @{$user->{groups}})) : ()),
            ($user->{home} ? ("-d", $user->{home}, "-m") : ()),
            ($user->{name} ? ("-c", $user->{name}) : ()),
            ($user->{shell} ? ("-s", $user->{shell}) : ())
          );
        } elsif (i_os("solaris")) {
          command("usermod",
            ($user->{uid} ? ("-u", $user->{uid}, "-o") : ()),
            ($user->{gid} ? ("-g", $user->{gid}) : ()),
            ($user->{groups} ? ("-G", join(",", @{$user->{groups}})) : ()),
            ($user->{home} ? ("-d", $user->{home}, "-m") : ()),
            ($user->{name} ? ("-c", $user->{name}) : ()),
            ($user->{shell} ? ("-s", $user->{shell}) : ()),
            $username
          );
        } else {
          throw ConfigException "Don't know how to modify users on ". i_os();
        }
      }
      if (i_os("solaris") && $user->{password} && $user->{force_password}) {
        if (!$safe_mode) {
          file_modify("/etc/shadow", undef,
                      [ "s/^$username:[^:]+:(.*)/$username:\Q$user->{password}\E:\$1/" ]);
        }
      }
      $user->{uid} ||= $uid;
      $user->{gid} ||= $gid;
    }

    $user->{uid} = $user->{uid} || lookup_user($username);
    $user->{gid} = $user->{gid} || lookup_group($username);
    dir_check(-dir => $user->{home}, -mode => $user->{homedir_mode}, -uid => $user->{uid} || 0,
              -gid => $user->{gid} || 0)
      if $user->{home};
  }
}


# Remove users and groups that are not required
if (i_should("users")) {
  while (my($username, $user) = each(%users)) {
    next if defined $user;
    next unless my $uid = getpwnam($username);
    l "Delete user $username";
    if (i_os("linux")) {
      command("userdel", $username);
    } elsif (i_os("freebsd")) {
      command("rmuser", "-y", $username);
    } elsif (i_os("solaris")) {
      command("userdel", $username);
    } else {
      throw ConfigException "Don't know how to delete users on ". i_os();
    }
  }
}

if (i_should("groups")) {
  while (my($name, $group) = each(%groups)) {
    next if defined $group;
    next unless my $gid = getgrnam($name);
    l "Delete group $name";
    if (i_os("linux")) {
      command("groupdel", $name);
    } elsif (i_os("freebsd")) {
      command("pw", "groupdel", $name);
    } elsif (i_os("solaris")) {
      command("groupdel", $name);
    } else {
      throw ConfigException "Don't know how to delete groups on ". i_os();
    }
  }
}


